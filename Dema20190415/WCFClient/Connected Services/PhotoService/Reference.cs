//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.PhotoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/DemoDB")]
    [System.SerializableAttribute()]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhotoIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTaken {
            get {
                return this.DateTakenField;
            }
            set {
                if ((this.DateTakenField.Equals(value) != true)) {
                    this.DateTakenField = value;
                    this.RaisePropertyChanged("DateTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoID {
            get {
                return this.PhotoIDField;
            }
            set {
                if ((this.PhotoIDField.Equals(value) != true)) {
                    this.PhotoIDField = value;
                    this.RaisePropertyChanged("PhotoID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoService.IPhotos")]
    public interface IPhotos {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetPhoto", ReplyAction="http://tempuri.org/IPhotos/GetPhotoResponse")]
        WCFClient.PhotoService.Photo GetPhoto(int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetPhoto", ReplyAction="http://tempuri.org/IPhotos/GetPhotoResponse")]
        System.Threading.Tasks.Task<WCFClient.PhotoService.Photo> GetPhotoAsync(int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/SetPhoto", ReplyAction="http://tempuri.org/IPhotos/SetPhotoResponse")]
        void SetPhoto(WCFClient.PhotoService.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/SetPhoto", ReplyAction="http://tempuri.org/IPhotos/SetPhotoResponse")]
        System.Threading.Tasks.Task SetPhotoAsync(WCFClient.PhotoService.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/PhotoList", ReplyAction="http://tempuri.org/IPhotos/PhotoListResponse")]
        System.Collections.Generic.List<WCFClient.PhotoService.Photo> PhotoList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/PhotoList", ReplyAction="http://tempuri.org/IPhotos/PhotoListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFClient.PhotoService.Photo>> PhotoListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotosChannel : WCFClient.PhotoService.IPhotos, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotosClient : System.ServiceModel.ClientBase<WCFClient.PhotoService.IPhotos>, WCFClient.PhotoService.IPhotos {
        
        public PhotosClient() {
        }
        
        public PhotosClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotosClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotosClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotosClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.PhotoService.Photo GetPhoto(int photoId) {
            return base.Channel.GetPhoto(photoId);
        }
        
        public System.Threading.Tasks.Task<WCFClient.PhotoService.Photo> GetPhotoAsync(int photoId) {
            return base.Channel.GetPhotoAsync(photoId);
        }
        
        public void SetPhoto(WCFClient.PhotoService.Photo photo) {
            base.Channel.SetPhoto(photo);
        }
        
        public System.Threading.Tasks.Task SetPhotoAsync(WCFClient.PhotoService.Photo photo) {
            return base.Channel.SetPhotoAsync(photo);
        }
        
        public System.Collections.Generic.List<WCFClient.PhotoService.Photo> PhotoList() {
            return base.Channel.PhotoList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFClient.PhotoService.Photo>> PhotoListAsync() {
            return base.Channel.PhotoListAsync();
        }
    }
}
